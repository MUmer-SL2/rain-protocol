{
  "id": "789519cb2a41a501ae3eb49f751838f4",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.6.12",
  "solcLongVersion": "0.6.12+commit.27d51765",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/tier/ITier.sol": {
        "content": "// SPDX-License-Identifier: CAL\n\npragma solidity 0.6.12;\n\n/// @title ITier\n/// @notice `ITier` is a simple interface that contracts can\n/// implement to provide membership lists for other contracts.\n///\n/// There are many use-cases for a time-preserving,\n/// conditional membership list.\n///\n/// Some examples include:\n///\n/// - Self-serve whitelist to participate in fundraising\n/// - Lists of users who can claim airdrops and perks\n/// - Pooling resources with implied governance/reward tiers\n/// - POAP style attendance proofs allowing access to future exclusive events\n///\n/// @dev Standard interface to a tiered membership.\n///\n/// A \"membership\" can represent many things:\n/// - Exclusive access.\n/// - Participation in some event or process.\n/// - KYC completion.\n/// - Combination of sub-memberships.\n/// - Etc.\n///\n/// The high level requirements for a contract implementing `ITier`:\n/// - MUST represent held tiers with the `Tier` enum.\n/// - MUST implement `report`.\n///   - The report is a `uint256` that SHOULD represent the block each tier has\n///     been continuously held since encoded as `uint32`.\n///   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n///     been held.\n///   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n///     value.\n///   - If a tier is lost the block data is erased for that tier and will be\n///     set if/when the tier is regained to the new block.\n///   - If the historical block information is not available the report MAY\n///     return `0x00000000` for all held tiers.\n///   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n/// - SHOULD implement `setTier`.\n///   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n///     meaningfully set a tier directly.\n///     For example a contract that can only derive a membership tier by\n///     reading the state of an external contract cannot set tiers.\n///   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n///     if `Tier.ZERO` is being set.\n/// - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n///   - Contracts that cannot meaningfully set a tier are exempt.\ninterface ITier {\n    /// 9 Possible tiers.\n    /// Fits nicely as uint32 in uint256 which is helpful for internal storage\n    /// concerns.\n    /// 8 tiers can be achieved, ZERO is the tier when no tier has been\n    /// achieved.\n    enum Tier {\n        ZERO,\n        ONE,\n        TWO,\n        THREE,\n        FOUR,\n        FIVE,\n        SIX,\n        SEVEN,\n        EIGHT\n    }\n\n    /// Every time a Tier changes we log start and end Tier against the\n    /// account.\n    /// This MAY NOT be emitted if reports are being read from the state of an\n    /// external contract.\n    event TierChange(\n        address indexed account,\n        Tier indexed startTier,\n        Tier indexed endTier\n    );\n\n    /// @notice Users can set their own tier by calling `setTier`.\n    ///\n    /// The contract that implements `ITier` is responsible for checking\n    /// eligibility and/or taking actions required to set the tier.\n    ///\n    /// For example, the contract must take/refund any tokens relevant to\n    /// changing the tier.\n    ///\n    /// Obviously the user is responsible for any approvals for this action\n    /// prior to calling `setTier`.\n    ///\n    /// When the tier is changed a `TierChange` event will be emmited as:\n    /// ```\n    /// event TierChange(address account, Tier startTier, Tier endTier);\n    /// ```\n    ///\n    /// The `setTier` function includes arbitrary data as the third\n    /// parameter. This can be used to disambiguate in the case that\n    /// there may be many possible options for a user to achieve some tier.\n    ///\n    /// For example, consider the case where `Tier.THREE` can be achieved\n    /// by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n    /// could use `data` to explicitly state their intent.\n    ///\n    /// NOTE however that _any_ address can call `setTier` for any other\n    /// address.\n    ///\n    /// If you implement `data` or anything that changes state then be very\n    /// careful to avoid griefing attacks.\n    ///\n    /// The `data` parameter can also be ignored by the contract implementing\n    /// `ITier`. For example, ERC20 tokens are fungible so only the balance\n    /// approved by the user is relevant to a tier change.\n    ///\n    /// The `setTier` function SHOULD prevent users from reassigning\n    /// `Tier.ZERO` to themselves.\n    ///\n    /// The `Tier.ZERO` status represents never having any status.\n    /// @dev Updates the tier of an account.\n    ///\n    /// The implementing contract is responsible for all checks and state\n    /// changes required to set the tier. For example, taking/refunding\n    /// funds/NFTs etc.\n    ///\n    /// Contracts may disallow directly setting tiers, preferring to derive\n    /// reports from other onchain data.\n    /// In this case they should `revert(\"SET_TIER\");`.\n    ///\n    /// @param account Account to change the tier for.\n    /// @param endTier Tier after the change.\n    /// @param data Arbitrary input to disambiguate ownership\n    /// (e.g. NFTs to lock).\n    function setTier(\n        address account,\n        Tier endTier,\n        bytes memory data\n    )\n        external;\n\n    /// @notice A tier report is a `uint256` that contains each of the block\n    /// numbers each tier has been held continously since as a `uint32`.\n    /// There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n    /// \"never held any tier\" then working up through 8x 4 byte offsets to the\n    /// full 256 bits.\n    ///\n    /// Low bits = Lower tier.\n    ///\n    /// In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n    /// from high bits and working down to `Tier.ONE`.\n    ///\n    /// `uint32` should be plenty for any blockchain that measures block times\n    /// in seconds, but reconsider if deploying to an environment with\n    /// significantly sub-second block times.\n    ///\n    /// ~135 years of 1 second blocks fit into `uint32`.\n    ///\n    /// `2^8 / (365 * 24 * 60 * 60)`\n    ///\n    /// When a user INCREASES their tier they keep all the block numbers they\n    /// already had, and get new block times for each increased tiers they have\n    /// earned.\n    ///\n    /// When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n    /// for every tier level they remove, but keep their block numbers for the\n    /// remaining tiers.\n    ///\n    /// GUIs are encouraged to make this dynamic very clear for users as\n    /// round-tripping to a lower status and back is a DESTRUCTIVE operation\n    /// for block times.\n    ///\n    /// The intent is that downstream code can provide additional benefits for\n    /// members who have maintained a certain tier for/since a long time.\n    /// These benefits can be provided by inspecting the report, and by\n    /// on-chain contracts directly,\n    /// rather than needing to work with snapshots etc.\n    /// @dev Returns the earliest block the account has held each tier for\n    /// continuously.\n    /// This is encoded as a uint256 with blocks represented as 8x\n    /// concatenated uint32.\n    /// I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n    /// The low bits represent low tiers and high bits the high tiers.\n    /// Implementing contracts should return 0xFFFFFFFF for lost &\n    /// never-held tiers.\n    ///\n    /// @param account Account to get the report for.\n    /// @return The report blocks encoded as a uint256.\n    function report(address account) external view returns (uint256);\n}"
      }
    },
    "settings": {
      "metadata": {
        "useLiteralContent": true
      },
      "optimizer": {
        "enabled": true,
        "runs": 100000
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/tier/ITier.sol": {
        "ITier": {
          "abi": [
            {
              "anonymous": false,
              "inputs": [
                {
                  "indexed": true,
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "startTier",
                  "type": "uint8"
                },
                {
                  "indexed": true,
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                }
              ],
              "name": "TierChange",
              "type": "event"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                }
              ],
              "name": "report",
              "outputs": [
                {
                  "internalType": "uint256",
                  "name": "",
                  "type": "uint256"
                }
              ],
              "stateMutability": "view",
              "type": "function"
            },
            {
              "inputs": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "enum ITier.Tier",
                  "name": "endTier",
                  "type": "uint8"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "setTier",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "report(address)": "e053ea31",
              "setTier(address,uint8,bytes)": "52dab69d"
            }
          }
        }
      }
    },
    "sources": {
      "contracts/tier/ITier.sol": {
        "ast": {
          "absolutePath": "contracts/tier/ITier.sol",
          "exportedSymbols": {
            "ITier": [
              40
            ]
          },
          "id": 41,
          "license": "CAL",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                "0.6",
                ".12"
              ],
              "nodeType": "PragmaDirective",
              "src": "33:23:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "58:2122:0",
                "text": "@title ITier\n @notice `ITier` is a simple interface that contracts can\n implement to provide membership lists for other contracts.\n There are many use-cases for a time-preserving,\n conditional membership list.\n Some examples include:\n - Self-serve whitelist to participate in fundraising\n - Lists of users who can claim airdrops and perks\n - Pooling resources with implied governance/reward tiers\n - POAP style attendance proofs allowing access to future exclusive events\n @dev Standard interface to a tiered membership.\n A \"membership\" can represent many things:\n - Exclusive access.\n - Participation in some event or process.\n - KYC completion.\n - Combination of sub-memberships.\n - Etc.\n The high level requirements for a contract implementing `ITier`:\n - MUST represent held tiers with the `Tier` enum.\n - MUST implement `report`.\n   - The report is a `uint256` that SHOULD represent the block each tier has\n     been continuously held since encoded as `uint32`.\n   - The encoded tiers start at ONE; ZERO is implied if no tier has ever\n     been held.\n   - `Tier.ZERO` is NOT encoded in the report, it is simply the fallback\n     value.\n   - If a tier is lost the block data is erased for that tier and will be\n     set if/when the tier is regained to the new block.\n   - If the historical block information is not available the report MAY\n     return `0x00000000` for all held tiers.\n   - Tiers that are lost or have never been held MUST return `0xFFFFFFFF`.\n - SHOULD implement `setTier`.\n   - Contracts SHOULD revert with `SET_TIER` error if they cannot\n     meaningfully set a tier directly.\n     For example a contract that can only derive a membership tier by\n     reading the state of an external contract cannot set tiers.\n   - Contracts implementing `setTier` SHOULD error with `SET_ZERO_TIER`\n     if `Tier.ZERO` is being set.\n - MUST emit `TierChange` when `setTier` successfully writes a new tier.\n   - Contracts that cannot meaningfully set a tier are exempt."
              },
              "fullyImplemented": false,
              "id": 40,
              "linearizedBaseContracts": [
                40
              ],
              "name": "ITier",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "canonicalName": "ITier.Tier",
                  "id": 12,
                  "members": [
                    {
                      "id": 3,
                      "name": "ZERO",
                      "nodeType": "EnumValue",
                      "src": "2435:4:0"
                    },
                    {
                      "id": 4,
                      "name": "ONE",
                      "nodeType": "EnumValue",
                      "src": "2449:3:0"
                    },
                    {
                      "id": 5,
                      "name": "TWO",
                      "nodeType": "EnumValue",
                      "src": "2462:3:0"
                    },
                    {
                      "id": 6,
                      "name": "THREE",
                      "nodeType": "EnumValue",
                      "src": "2475:5:0"
                    },
                    {
                      "id": 7,
                      "name": "FOUR",
                      "nodeType": "EnumValue",
                      "src": "2490:4:0"
                    },
                    {
                      "id": 8,
                      "name": "FIVE",
                      "nodeType": "EnumValue",
                      "src": "2504:4:0"
                    },
                    {
                      "id": 9,
                      "name": "SIX",
                      "nodeType": "EnumValue",
                      "src": "2518:3:0"
                    },
                    {
                      "id": 10,
                      "name": "SEVEN",
                      "nodeType": "EnumValue",
                      "src": "2531:5:0"
                    },
                    {
                      "id": 11,
                      "name": "EIGHT",
                      "nodeType": "EnumValue",
                      "src": "2546:5:0"
                    }
                  ],
                  "name": "Tier",
                  "nodeType": "EnumDefinition",
                  "src": "2415:142:0"
                },
                {
                  "anonymous": false,
                  "documentation": {
                    "id": 13,
                    "nodeType": "StructuredDocumentation",
                    "src": "2563:190:0",
                    "text": "Every time a Tier changes we log start and end Tier against the\n account.\n This MAY NOT be emitted if reports are being read from the state of an\n external contract."
                  },
                  "id": 21,
                  "name": "TierChange",
                  "nodeType": "EventDefinition",
                  "parameters": {
                    "id": 20,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 15,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 21,
                        "src": "2784:23:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 14,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2784:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 17,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "startTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 21,
                        "src": "2817:22:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$12",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 16,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 12,
                          "src": "2817:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$12",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 19,
                        "indexed": true,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 21,
                        "src": "2849:20:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$12",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 18,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 12,
                          "src": "2849:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$12",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "2774:101:0"
                  },
                  "src": "2758:118:0"
                },
                {
                  "body": null,
                  "documentation": {
                    "id": 22,
                    "nodeType": "StructuredDocumentation",
                    "src": "2882:2294:0",
                    "text": "@notice Users can set their own tier by calling `setTier`.\n The contract that implements `ITier` is responsible for checking\n eligibility and/or taking actions required to set the tier.\n For example, the contract must take/refund any tokens relevant to\n changing the tier.\n Obviously the user is responsible for any approvals for this action\n prior to calling `setTier`.\n When the tier is changed a `TierChange` event will be emmited as:\n ```\n event TierChange(address account, Tier startTier, Tier endTier);\n ```\n The `setTier` function includes arbitrary data as the third\n parameter. This can be used to disambiguate in the case that\n there may be many possible options for a user to achieve some tier.\n For example, consider the case where `Tier.THREE` can be achieved\n by EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\n could use `data` to explicitly state their intent.\n NOTE however that _any_ address can call `setTier` for any other\n address.\n If you implement `data` or anything that changes state then be very\n careful to avoid griefing attacks.\n The `data` parameter can also be ignored by the contract implementing\n `ITier`. For example, ERC20 tokens are fungible so only the balance\n approved by the user is relevant to a tier change.\n The `setTier` function SHOULD prevent users from reassigning\n `Tier.ZERO` to themselves.\n The `Tier.ZERO` status represents never having any status.\n @dev Updates the tier of an account.\n The implementing contract is responsible for all checks and state\n changes required to set the tier. For example, taking/refunding\n funds/NFTs etc.\n Contracts may disallow directly setting tiers, preferring to derive\n reports from other onchain data.\n In this case they should `revert(\"SET_TIER\");`.\n @param account Account to change the tier for.\n @param endTier Tier after the change.\n @param data Arbitrary input to disambiguate ownership\n (e.g. NFTs to lock)."
                  },
                  "functionSelector": "52dab69d",
                  "id": 31,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "setTier",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 29,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 24,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 31,
                        "src": "5207:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 23,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "5207:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 26,
                        "mutability": "mutable",
                        "name": "endTier",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 31,
                        "src": "5232:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_Tier_$12",
                          "typeString": "enum ITier.Tier"
                        },
                        "typeName": {
                          "contractScope": null,
                          "id": 25,
                          "name": "Tier",
                          "nodeType": "UserDefinedTypeName",
                          "referencedDeclaration": 12,
                          "src": "5232:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_Tier_$12",
                            "typeString": "enum ITier.Tier"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 28,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 31,
                        "src": "5254:17:0",
                        "stateVariable": false,
                        "storageLocation": "memory",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 27,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "5254:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "5197:80:0"
                  },
                  "returnParameters": {
                    "id": 30,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "5294:0:0"
                  },
                  "scope": 40,
                  "src": "5181:114:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                },
                {
                  "body": null,
                  "documentation": {
                    "id": 32,
                    "nodeType": "StructuredDocumentation",
                    "src": "5301:2251:0",
                    "text": "@notice A tier report is a `uint256` that contains each of the block\n numbers each tier has been held continously since as a `uint32`.\n There are 9 possible tier, starting with `Tier.ZERO` for `0` offset or\n \"never held any tier\" then working up through 8x 4 byte offsets to the\n full 256 bits.\n Low bits = Lower tier.\n In hexadecimal every 8 characters = one tier, starting at `Tier.EIGHT`\n from high bits and working down to `Tier.ONE`.\n `uint32` should be plenty for any blockchain that measures block times\n in seconds, but reconsider if deploying to an environment with\n significantly sub-second block times.\n ~135 years of 1 second blocks fit into `uint32`.\n `2^8 / (365 * 24 * 60 * 60)`\n When a user INCREASES their tier they keep all the block numbers they\n already had, and get new block times for each increased tiers they have\n earned.\n When a user DECREASES their tier they return to `0xFFFFFFFF` (never)\n for every tier level they remove, but keep their block numbers for the\n remaining tiers.\n GUIs are encouraged to make this dynamic very clear for users as\n round-tripping to a lower status and back is a DESTRUCTIVE operation\n for block times.\n The intent is that downstream code can provide additional benefits for\n members who have maintained a certain tier for/since a long time.\n These benefits can be provided by inspecting the report, and by\n on-chain contracts directly,\n rather than needing to work with snapshots etc.\n @dev Returns the earliest block the account has held each tier for\n continuously.\n This is encoded as a uint256 with blocks represented as 8x\n concatenated uint32.\n I.e. Each 4 bytes of the uint256 represents a u32 tier start time.\n The low bits represent low tiers and high bits the high tiers.\n Implementing contracts should return 0xFFFFFFFF for lost &\n never-held tiers.\n @param account Account to get the report for.\n @return The report blocks encoded as a uint256."
                  },
                  "functionSelector": "e053ea31",
                  "id": 39,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "report",
                  "nodeType": "FunctionDefinition",
                  "overrides": null,
                  "parameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 34,
                        "mutability": "mutable",
                        "name": "account",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 39,
                        "src": "7573:15:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 33,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "7573:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7572:17:0"
                  },
                  "returnParameters": {
                    "id": 38,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 37,
                        "mutability": "mutable",
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "overrides": null,
                        "scope": 39,
                        "src": "7613:7:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 36,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "7613:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "7612:9:0"
                  },
                  "scope": 40,
                  "src": "7557:65:0",
                  "stateMutability": "view",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 41,
              "src": "2180:5444:0"
            }
          ],
          "src": "33:7591:0"
        },
        "id": 0
      }
    }
  }
}
