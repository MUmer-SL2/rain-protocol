"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1325],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return p}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=s(t),p=i,h=u["".concat(l,".").concat(p)]||u[p]||m[p]||a;return t?r.createElement(h,o(o({ref:n},c),{},{components:t})):r.createElement(h,o({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var d={};for(var l in n)hasOwnProperty.call(n,l)&&(d[l]=n[l]);d.originalType=e,d.mdxType="string"==typeof e?e:i,o[1]=d;for(var s=2;s<a;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8284:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return d},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],d={},l=void 0,s={unversionedId:"api/redeemableERC20/RedeemableERC20",id:"version-v0.0.13/api/redeemableERC20/RedeemableERC20",isDocsHomePage:!1,title:"RedeemableERC20",description:"This is the ERC20 token that is minted and distributed.",source:"@site/versioned_docs/version-v0.0.13/api/redeemableERC20/RedeemableERC20.md",sourceDirName:"api/redeemableERC20",slug:"/api/redeemableERC20/RedeemableERC20",permalink:"/rain-protocol/v0.0.13/api/redeemableERC20/RedeemableERC20",tags:[],version:"v0.0.13",frontMatter:{},sidebar:"version-v0.0.13/tutorialSidebar",previous:{title:"RedeemableERC20PoolFactory",permalink:"/rain-protocol/v0.0.13/api/pool/RedeemableERC20PoolFactory"},next:{title:"RedeemableERC20Factory",permalink:"/rain-protocol/v0.0.13/api/redeemableERC20/RedeemableERC20Factory"}},c=[{value:"Details",id:"details",children:[]},{value:"Variables",id:"variables",children:[{value:"<code>bytes32</code> <code>SENDER</code>",id:"bytes32-sender",children:[]},{value:"<code>bytes32</code> <code>RECEIVER</code>",id:"bytes32-receiver",children:[]},{value:"<code>bytes32</code> <code>DISTRIBUTOR_BURNER</code>",id:"bytes32-distributor_burner",children:[]},{value:"<code>bytes32</code> <code>REDEEMABLE_ADDER</code>",id:"bytes32-redeemable_adder",children:[]},{value:"<code>uint256</code> <code>MINIMUM_INITIAL_SUPPLY</code>",id:"uint256-minimum_initial_supply",children:[]},{value:"<code>uint8</code> <code>MAX_REDEEMABLES</code>",id:"uint8-max_redeemables",children:[]},{value:"<code>enum ITier.Tier</code> <code>minimumTier</code>",id:"enum-itiertier-minimumtier",children:[]}]},{value:"Events",id:"events",children:[{value:"<code>Redeem(address redeemer, address redeemable, uint256[2] redeemAmounts)</code>",id:"redeemaddress-redeemer-address-redeemable-uint2562-redeemamounts",children:[]}]},{value:"Functions",id:"functions",children:[{value:"<code>constructor(struct RedeemableERC20Config config_)</code> (public)",id:"constructorstruct-redeemableerc20config-config_-public",children:[]},{value:"<code>burnDistributor(address distributorAccount_)</code> (external)",id:"burndistributoraddress-distributoraccount_-external",children:[]},{value:"<code>addRedeemable(contract IERC20 newRedeemable_)</code> (external)",id:"addredeemablecontract-ierc20-newredeemable_-external",children:[]},{value:"<code>getRedeemables() \u2192 address[8]</code> (external)",id:"getredeemables--address8-external",children:[]},{value:"<code>redeemSpecific(contract IERC20[] specificRedeemables_, uint256 redeemAmount_)</code> (public)",id:"redeemspecificcontract-ierc20-specificredeemables_-uint256-redeemamount_-public",children:[]},{value:"<code>redeem(uint256 redeemAmount_)</code> (external)",id:"redeemuint256-redeemamount_-external",children:[]},{value:"<code>_beforeScheduleNextPhase(uint32 nextPhaseBlock_)</code> (internal)",id:"_beforeschedulenextphaseuint32-nextphaseblock_-internal",children:[]},{value:"<code>_beforeTokenTransfer(address sender_, address receiver_, uint256 amount_)</code> (internal)",id:"_beforetokentransferaddress-sender_-address-receiver_-uint256-amount_-internal",children:[]}]}],m={toc:c};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This is the ERC20 token that is minted and distributed."),(0,a.kt)("p",null,"During ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO")," the token can be traded and so compatible with the\nBalancer pool mechanics."),(0,a.kt)("p",null,"During ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," the token is frozen and no longer able to be traded on\nany AMM or transferred directly."),(0,a.kt)("p",null,"The token can be redeemed during ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," which burns the token in\nexchange for pro-rata erc20 tokens held by the ",(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," contract\nitself."),(0,a.kt)("p",null,"The token balances can be used indirectly for other claims, promotions and\nevents as a proof of participation in the original distribution by token\nholders."),(0,a.kt)("p",null,"The token can optionally be restricted by the ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier")," contract to only allow\nreceipients with a specified membership status."),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," is an ERC20 with 2 phases."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO")," is the distribution phase where the token can be freely\ntransfered but not redeemed.\n",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," is the redemption phase where the token can be redeemed but no\nlonger transferred."),(0,a.kt)("p",null,"Redeeming some amount of ",(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," burns the token in exchange for\nsome other tokens held by the contract. For example, if the\n",(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," token contract holds 100 000 USDC then a holder of the\nredeemable token can burn some of their tokens to receive a % of that USDC.\nIf they redeemed (burned) an amount equal to 10% of the redeemable token\nsupply then they would receive 10 000 USDC."),(0,a.kt)("p",null,"Up to 8 redeemable tokens can be registered on the redeemable contract.\nThese will be looped over by default in the ",(0,a.kt)("inlineCode",{parentName:"p"},"redeem")," function. If there is\nan error during redemption or more than 8 tokens are to be redeemed, there\nis a ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemSpecific")," function that allows the caller to specify exactly\nwhich of the redeemable tokens they want to receive.\nNote: The same amount of ",(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," is burned, regardless of which\nredeemable tokens were specified. Specifying fewer redeemable tokens will\nNOT increase the proportion of each that is returned. ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemSpecific")," is\nintended as a last resort if the caller cannot resolve issues causing\nerrors for one or more redeemable tokens during redemption."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"RedeemableERC20")," has several owner administrative functions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Owner can add senders and receivers that can send/receive tokens even\nduring ",(0,a.kt)("inlineCode",{parentName:"li"},"Phase.ONE")),(0,a.kt)("li",{parentName:"ul"},"Owner can add to the list of redeemable tokens",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"But NOT remove them"),(0,a.kt)("li",{parentName:"ul"},"And everyone can call ",(0,a.kt)("inlineCode",{parentName:"li"},"redeemSpecific")," to override the redeemable list"))),(0,a.kt)("li",{parentName:"ul"},"Owner can end ",(0,a.kt)("inlineCode",{parentName:"li"},"Phase.ONE")," during ",(0,a.kt)("inlineCode",{parentName:"li"},"Phase.ZERO")," by specifying the address\nof a distributor, which will have any undistributed tokens burned.")),(0,a.kt)("p",null,"The intent is that the redeemable token contract is owned by a ",(0,a.kt)("inlineCode",{parentName:"p"},"Trust"),"\ncontract, NOT an externally owned account. The ",(0,a.kt)("inlineCode",{parentName:"p"},"Trust")," contract will add\nthe minimum possible senders/receivers to facilitate the AMM trading and\nredemption."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Trust")," will also control access to managing redeemable tokens and\nspecifying the trading AMM pool as the distributor to burn to end\n",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE"),"."),(0,a.kt)("p",null,"The redeem functions MUST be used to redeem and burn RedeemableERC20s\n(NOT regular transfers)."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"redeem")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemSpecific")," functions will simply revert if called\noutside ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE"),".\nA ",(0,a.kt)("inlineCode",{parentName:"p"},"Redeem")," event is emitted on every redemption (per redeemed token) as\n",(0,a.kt)("inlineCode",{parentName:"p"},"(redeemer, redeemable, redeemAmount)"),"."),(0,a.kt)("h2",{id:"variables"},"Variables"),(0,a.kt)("h3",{id:"bytes32-sender"},(0,a.kt)("inlineCode",{parentName:"h3"},"bytes32")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"SENDER")),(0,a.kt)("h3",{id:"bytes32-receiver"},(0,a.kt)("inlineCode",{parentName:"h3"},"bytes32")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"RECEIVER")),(0,a.kt)("h3",{id:"bytes32-distributor_burner"},(0,a.kt)("inlineCode",{parentName:"h3"},"bytes32")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"DISTRIBUTOR_BURNER")),(0,a.kt)("h3",{id:"bytes32-redeemable_adder"},(0,a.kt)("inlineCode",{parentName:"h3"},"bytes32")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"REDEEMABLE_ADDER")),(0,a.kt)("h3",{id:"uint256-minimum_initial_supply"},(0,a.kt)("inlineCode",{parentName:"h3"},"uint256")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"MINIMUM_INITIAL_SUPPLY")),(0,a.kt)("h3",{id:"uint8-max_redeemables"},(0,a.kt)("inlineCode",{parentName:"h3"},"uint8")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"MAX_REDEEMABLES")),(0,a.kt)("h3",{id:"enum-itiertier-minimumtier"},(0,a.kt)("inlineCode",{parentName:"h3"},"enum ITier.Tier")," ",(0,a.kt)("inlineCode",{parentName:"h3"},"minimumTier")),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"redeemaddress-redeemer-address-redeemable-uint2562-redeemamounts"},(0,a.kt)("inlineCode",{parentName:"h3"},"Redeem(address redeemer, address redeemable, uint256[2] redeemAmounts)")),(0,a.kt)("p",null,"Redeemable token burn for reserve."),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"constructorstruct-redeemableerc20config-config_-public"},(0,a.kt)("inlineCode",{parentName:"h3"},"constructor(struct RedeemableERC20Config config_)")," (public)"),(0,a.kt)("p",null,"Mint the full ERC20 token supply and configure basic transfer\nrestrictions."),(0,a.kt)("h3",{id:"burndistributoraddress-distributoraccount_-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"burnDistributor(address distributorAccount_)")," (external)"),(0,a.kt)("p",null,"The admin can burn all tokens of a single address to end ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO"),".\nThe intent is that during ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO")," there is some contract\nresponsible for distributing the tokens.\nThe admin specifies the distributor to end ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO")," and all\nundistributed tokens are burned.\nThe distributor is NOT set during the constructor because it likely\ndoesn't exist at that point. For example, Balancer needs the paired\nerc20 tokens to exist before the trading pool can be built."),(0,a.kt)("h3",{id:"addredeemablecontract-ierc20-newredeemable_-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"addRedeemable(contract IERC20 newRedeemable_)")," (external)"),(0,a.kt)("p",null,"Admin can add up to 8 redeemables to this contract.\nEach redeemable will be sent to token holders when they call redeem\nfunctions in ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," to burn tokens.\nIf the admin adds a non-compliant or malicious IERC20 address then\ntoken holders can override the list with ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemSpecific"),"."),(0,a.kt)("h3",{id:"getredeemables--address8-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"getRedeemables() \u2192 address[8]")," (external)"),(0,a.kt)("p",null,"Public getter for underlying registered redeemables as a fixed sized\narray.\nThe underlying array is dynamic but fixed size return values provide\nclear bounds on gas etc."),(0,a.kt)("h3",{id:"redeemspecificcontract-ierc20-specificredeemables_-uint256-redeemamount_-public"},(0,a.kt)("inlineCode",{parentName:"h3"},"redeemSpecific(contract IERC20[] specificRedeemables_, uint256 redeemAmount_)")," (public)"),(0,a.kt)("p",null,"Redeem tokens.\nTokens can be redeemed but NOT transferred during ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE"),"."),(0,a.kt)("p",null,"Calculate the redeem value of tokens as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"( redeemAmount / redeemableErc20Token.totalSupply() )\n* token.balanceOf(address(this))\n")),(0,a.kt)("p",null,"This means that the users get their redeemed pro-rata share of the\noutstanding token supply burned in return for a pro-rata share of the\ncurrent balance of each redeemable token."),(0,a.kt)("p",null,"I.e. whatever % of redeemable tokens the sender burns is the % of the\ncurrent reserve they receive."),(0,a.kt)("p",null,"Note: Any tokens held by ",(0,a.kt)("inlineCode",{parentName:"p"},"address(0)")," are burned defensively.\nThis is because transferring directly to ",(0,a.kt)("inlineCode",{parentName:"p"},"address(0)")," will\nsucceed but the ",(0,a.kt)("inlineCode",{parentName:"p"},"totalSupply")," won't reflect it."),(0,a.kt)("h3",{id:"redeemuint256-redeemamount_-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"redeem(uint256 redeemAmount_)")," (external)"),(0,a.kt)("p",null,"Default redemption behaviour.\nThin wrapper for ",(0,a.kt)("inlineCode",{parentName:"p"},"redeemSpecific"),".\n",(0,a.kt)("inlineCode",{parentName:"p"},"msg.sender")," specifies an amount of their own redeemable token to\nredeem.\nEach redeemable token specified by this contract's admin will be sent\nto the sender pro-rata.\nThe sender's tokens are burned in the process."),(0,a.kt)("h3",{id:"_beforeschedulenextphaseuint32-nextphaseblock_-internal"},(0,a.kt)("inlineCode",{parentName:"h3"},"_beforeScheduleNextPhase(uint32 nextPhaseBlock_)")," (internal)"),(0,a.kt)("p",null,"Sanity check to ensure ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," is the final phase."),(0,a.kt)("h3",{id:"_beforetokentransferaddress-sender_-address-receiver_-uint256-amount_-internal"},(0,a.kt)("inlineCode",{parentName:"h3"},"_beforeTokenTransfer(address sender_, address receiver_, uint256 amount_)")," (internal)"),(0,a.kt)("p",null,"Apply phase sensitive transfer restrictions.\nDuring ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ZERO")," only tier requirements apply.\nDuring ",(0,a.kt)("inlineCode",{parentName:"p"},"Phase.ONE")," all transfers except burns are prevented.\nIf a transfer involves either a sender or receiver with the relevant\n",(0,a.kt)("inlineCode",{parentName:"p"},"unfreezables")," state it will ignore these restrictions."),(0,a.kt)("p",null,"Hook that is called before any transfer of tokens. This includes\nminting and burning.\nCalling conditions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"when ",(0,a.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"to")," are both non-zero, ",(0,a.kt)("inlineCode",{parentName:"li"},"amount")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"from"),"'s tokens\nwill be to transferred to ",(0,a.kt)("inlineCode",{parentName:"li"},"to"),"."),(0,a.kt)("li",{parentName:"ul"},"when ",(0,a.kt)("inlineCode",{parentName:"li"},"from")," is zero, ",(0,a.kt)("inlineCode",{parentName:"li"},"amount")," tokens will be minted for ",(0,a.kt)("inlineCode",{parentName:"li"},"to"),"."),(0,a.kt)("li",{parentName:"ul"},"when ",(0,a.kt)("inlineCode",{parentName:"li"},"to")," is zero, ",(0,a.kt)("inlineCode",{parentName:"li"},"amount")," of ",(0,a.kt)("inlineCode",{parentName:"li"},"from"),"'s tokens will be burned."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"to")," are never both zero.\nTo learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks","[Using Hooks]",".")))}u.isMDXComponent=!0}}]);