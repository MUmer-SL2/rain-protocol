"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[8238],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},p),{},{components:n})):r.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},501:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),i=n(3366),a=(n(7294),n(3905)),o=["components"],l={},s=void 0,c={unversionedId:"api/tier/ITier",id:"version-v0.0.12/api/tier/ITier",isDocsHomePage:!1,title:"ITier",description:"ITier is a simple interface that contracts can",source:"@site/versioned_docs/version-v0.0.12/api/tier/ITier.md",sourceDirName:"api/tier",slug:"/api/tier/ITier",permalink:"/rain-protocol/v0.0.12/api/tier/ITier",tags:[],version:"v0.0.12",frontMatter:{},sidebar:"version-v0.0.12/tutorialSidebar",previous:{title:"ERC20TransferTier",permalink:"/rain-protocol/v0.0.12/api/tier/ERC20TransferTier"},next:{title:"NeverTier",permalink:"/rain-protocol/v0.0.12/api/tier/NeverTier"}},p=[{value:"Details",id:"details",children:[]},{value:"Events",id:"events",children:[{value:"<code>TierChange(address account, enum ITier.Tier startTier, enum ITier.Tier endTier)</code>",id:"tierchangeaddress-account-enum-itiertier-starttier-enum-itiertier-endtier",children:[]}]},{value:"Functions",id:"functions",children:[{value:"<code>setTier(address account, enum ITier.Tier endTier, bytes data)</code> (external)",id:"settieraddress-account-enum-itiertier-endtier-bytes-data-external",children:[]},{value:"<code>report(address account) \u2192 uint256</code> (external)",id:"reportaddress-account--uint256-external",children:[]}]}],u={toc:p};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ITier")," is a simple interface that contracts can\nimplement to provide membership lists for other contracts."),(0,a.kt)("p",null,"There are many use-cases for a time-preserving,\nconditional membership list."),(0,a.kt)("p",null,"Some examples include:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Self-serve whitelist to participate in fundraising"),(0,a.kt)("li",{parentName:"ul"},"Lists of users who can claim airdrops and perks"),(0,a.kt)("li",{parentName:"ul"},"Pooling resources with implied governance/reward tiers"),(0,a.kt)("li",{parentName:"ul"},"POAP style attendance proofs allowing access to future exclusive events")),(0,a.kt)("h2",{id:"details"},"Details"),(0,a.kt)("p",null,"Standard interface to a tiered membership."),(0,a.kt)("p",null,'A "membership" can represent many things:'),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Exclusive access."),(0,a.kt)("li",{parentName:"ul"},"Participation in some event or process."),(0,a.kt)("li",{parentName:"ul"},"KYC completion."),(0,a.kt)("li",{parentName:"ul"},"Combination of sub-memberships."),(0,a.kt)("li",{parentName:"ul"},"Etc.")),(0,a.kt)("p",null,"The high level requirements for a contract implementing ",(0,a.kt)("inlineCode",{parentName:"p"},"ITier"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"MUST represent held tiers with the ",(0,a.kt)("inlineCode",{parentName:"li"},"Tier")," enum."),(0,a.kt)("li",{parentName:"ul"},"MUST implement ",(0,a.kt)("inlineCode",{parentName:"li"},"report"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"The report is a ",(0,a.kt)("inlineCode",{parentName:"li"},"uint256")," that SHOULD represent the block each tier has\nbeen continuously held since encoded as ",(0,a.kt)("inlineCode",{parentName:"li"},"uint32"),"."),(0,a.kt)("li",{parentName:"ul"},"The encoded tiers start at ONE; ZERO is implied if no tier has ever\nbeen held."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Tier.ZERO")," is NOT encoded in the report, it is simply the fallback\nvalue."),(0,a.kt)("li",{parentName:"ul"},"If a tier is lost the block data is erased for that tier and will be\nset if/when the tier is regained to the new block."),(0,a.kt)("li",{parentName:"ul"},"If the historical block information is not available the report MAY\nreturn ",(0,a.kt)("inlineCode",{parentName:"li"},"0x00000000")," for all held tiers."),(0,a.kt)("li",{parentName:"ul"},"Tiers that are lost or have never been held MUST return ",(0,a.kt)("inlineCode",{parentName:"li"},"0xFFFFFFFF"),"."))),(0,a.kt)("li",{parentName:"ul"},"SHOULD implement ",(0,a.kt)("inlineCode",{parentName:"li"},"setTier"),".",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Contracts SHOULD revert with ",(0,a.kt)("inlineCode",{parentName:"li"},"SET_TIER")," error if they cannot\nmeaningfully set a tier directly.\nFor example a contract that can only derive a membership tier by\nreading the state of an external contract cannot set tiers."),(0,a.kt)("li",{parentName:"ul"},"Contracts implementing ",(0,a.kt)("inlineCode",{parentName:"li"},"setTier")," SHOULD error with ",(0,a.kt)("inlineCode",{parentName:"li"},"SET_ZERO_TIER"),"\nif ",(0,a.kt)("inlineCode",{parentName:"li"},"Tier.ZERO")," is being set."))),(0,a.kt)("li",{parentName:"ul"},"MUST emit ",(0,a.kt)("inlineCode",{parentName:"li"},"TierChange")," when ",(0,a.kt)("inlineCode",{parentName:"li"},"setTier")," successfully writes a new tier.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Contracts that cannot meaningfully set a tier are exempt.")))),(0,a.kt)("h2",{id:"events"},"Events"),(0,a.kt)("h3",{id:"tierchangeaddress-account-enum-itiertier-starttier-enum-itiertier-endtier"},(0,a.kt)("inlineCode",{parentName:"h3"},"TierChange(address account, enum ITier.Tier startTier, enum ITier.Tier endTier)")),(0,a.kt)("p",null,"Every time a Tier changes we log start and end Tier against the\naccount.\nThis MAY NOT be emitted if reports are being read from the state of an\nexternal contract."),(0,a.kt)("h2",{id:"functions"},"Functions"),(0,a.kt)("h3",{id:"settieraddress-account-enum-itiertier-endtier-bytes-data-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"setTier(address account, enum ITier.Tier endTier, bytes data)")," (external)"),(0,a.kt)("p",null,"Users can set their own tier by calling ",(0,a.kt)("inlineCode",{parentName:"p"},"setTier"),"."),(0,a.kt)("p",null,"The contract that implements ",(0,a.kt)("inlineCode",{parentName:"p"},"ITier")," is responsible for checking\neligibility and/or taking actions required to set the tier."),(0,a.kt)("p",null,"For example, the contract must take/refund any tokens relevant to\nchanging the tier."),(0,a.kt)("p",null,"Obviously the user is responsible for any approvals for this action\nprior to calling ",(0,a.kt)("inlineCode",{parentName:"p"},"setTier"),"."),(0,a.kt)("p",null,"When the tier is changed a ",(0,a.kt)("inlineCode",{parentName:"p"},"TierChange")," event will be emmited as:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"event TierChange(address account, Tier startTier, Tier endTier);\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"setTier")," function includes arbitrary data as the third\nparameter. This can be used to disambiguate in the case that\nthere may be many possible options for a user to achieve some tier."),(0,a.kt)("p",null,"For example, consider the case where ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.THREE")," can be achieved\nby EITHER locking 1x rare NFT or 3x uncommon NFTs. A user with both\ncould use ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," to explicitly state their intent."),(0,a.kt)("p",null,"NOTE however that ",(0,a.kt)("em",{parentName:"p"},"any")," address can call ",(0,a.kt)("inlineCode",{parentName:"p"},"setTier")," for any other\naddress."),(0,a.kt)("p",null,"If you implement ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," or anything that changes state then be very\ncareful to avoid griefing attacks."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"data")," parameter can also be ignored by the contract implementing\n",(0,a.kt)("inlineCode",{parentName:"p"},"ITier"),". For example, ERC20 tokens are fungible so only the balance\napproved by the user is relevant to a tier change."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"setTier")," function SHOULD prevent users from reassigning\n",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.ZERO")," to themselves."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.ZERO")," status represents never having any status."),(0,a.kt)("p",null,"Updates the tier of an account."),(0,a.kt)("p",null,"The implementing contract is responsible for all checks and state\nchanges required to set the tier. For example, taking/refunding\nfunds/NFTs etc."),(0,a.kt)("p",null,"Contracts may disallow directly setting tiers, preferring to derive\nreports from other onchain data.\nIn this case they should ",(0,a.kt)("inlineCode",{parentName:"p"},'revert("SET_TIER");'),"."),(0,a.kt)("h3",{id:"reportaddress-account--uint256-external"},(0,a.kt)("inlineCode",{parentName:"h3"},"report(address account) \u2192 uint256")," (external)"),(0,a.kt)("p",null,"A tier report is a ",(0,a.kt)("inlineCode",{parentName:"p"},"uint256")," that contains each of the block\nnumbers each tier has been held continously since as a ",(0,a.kt)("inlineCode",{parentName:"p"},"uint32"),".\nThere are 9 possible tier, starting with ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.ZERO")," for ",(0,a.kt)("inlineCode",{parentName:"p"},"0"),' offset or\n"never held any tier" then working up through 8x 4 byte offsets to the\nfull 256 bits.'),(0,a.kt)("p",null,"Low bits = Lower tier."),(0,a.kt)("p",null,"In hexadecimal every 8 characters = one tier, starting at ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.EIGHT"),"\nfrom high bits and working down to ",(0,a.kt)("inlineCode",{parentName:"p"},"Tier.ONE"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"uint32")," should be plenty for any blockchain that measures block times\nin seconds, but reconsider if deploying to an environment with\nsignificantly sub-second block times."),(0,a.kt)("p",null,"~135 years of 1 second blocks fit into ",(0,a.kt)("inlineCode",{parentName:"p"},"uint32"),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"2^8 / (365 * 24 * 60 * 60)")),(0,a.kt)("p",null,"When a user INCREASES their tier they keep all the block numbers they\nalready had, and get new block times for each increased tiers they have\nearned."),(0,a.kt)("p",null,"When a user DECREASES their tier they return to ",(0,a.kt)("inlineCode",{parentName:"p"},"0xFFFFFFFF")," (never)\nfor every tier level they remove, but keep their block numbers for the\nremaining tiers."),(0,a.kt)("p",null,"GUIs are encouraged to make this dynamic very clear for users as\nround-tripping to a lower status and back is a DESTRUCTIVE operation\nfor block times."),(0,a.kt)("p",null,"The intent is that downstream code can provide additional benefits for\nmembers who have maintained a certain tier for/since a long time.\nThese benefits can be provided by inspecting the report, and by\non-chain contracts directly,\nrather than needing to work with snapshots etc."),(0,a.kt)("p",null,"Returns the earliest block the account has held each tier for\ncontinuously.\nThis is encoded as a uint256 with blocks represented as 8x\nconcatenated uint32.\nI.e. Each 4 bytes of the uint256 represents a u32 tier start time.\nThe low bits represent low tiers and high bits the high tiers.\nImplementing contracts should return 0xFFFFFFFF for lost &\nnever-held tiers."))}d.isMDXComponent=!0}}]);