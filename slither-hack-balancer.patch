Submodule contracts/configurable-rights-pool contains modified content
diff --git a/contracts/configurable-rights-pool/contracts/CRPFactory.sol b/contracts/configurable-rights-pool/contracts/CRPFactory.sol
index 52ef23b..532f5a1 100644
--- a/contracts/configurable-rights-pool/contracts/CRPFactory.sol
+++ b/contracts/configurable-rights-pool/contracts/CRPFactory.sol
@@ -49,7 +49,7 @@ contract CRPFactory {
      */
     function newCrp(
         address factoryAddress,
-        ConfigurableRightsPool.PoolParams calldata poolParams,
+        PoolParams calldata poolParams,
         RightsManager.Rights calldata rights
     )
         external
diff --git a/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol b/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
index e3df626..e98f5c7 100644
--- a/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
+++ b/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
@@ -18,6 +18,17 @@ import { RightsManager } from "../libraries/RightsManager.sol";
 import "../libraries/SmartPoolManager.sol";
 import "../libraries/SafeApprove.sol";
 
+struct PoolParams {
+    // Balancer Pool Token (representing shares of the pool)
+    string poolTokenSymbol;
+    string poolTokenName;
+    // Tokens inside the Pool
+    address[] constituentTokens;
+    uint[] tokenBalances;
+    uint[] tokenWeights;
+    uint swapFee;
+}
+
 // Contracts
 
 /**
@@ -44,16 +55,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
 
     // Type declarations
 
-    struct PoolParams {
-        // Balancer Pool Token (representing shares of the pool)
-        string poolTokenSymbol;
-        string poolTokenName;
-        // Tokens inside the Pool
-        address[] constituentTokens;
-        uint[] tokenBalances;
-        uint[] tokenWeights;
-        uint swapFee;
-    }
+
 
     // State variables
 
@@ -122,7 +124,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
         uint oldCap,
         uint newCap
     );
-    
+
     event NewTokenCommitted(
         address indexed token,
         address indexed pool,
@@ -207,7 +209,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
         // These default block time parameters can be overridden in createPool
         minimumWeightChangeBlockPeriod = DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD;
         addTokenTimeLockInBlocks = DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS;
-        
+
         gradualUpdate.startWeights = poolParams.tokenWeights;
         // Initializing (unnecessarily) for documentation - 0 means no gradual weight change has been initiated
         gradualUpdate.startBlock = 0;
@@ -328,7 +330,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
     {
         require (minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,
                 "ERR_INCONSISTENT_TOKEN_TIME_LOCK");
- 
+
         minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;
         addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;
 
@@ -385,7 +387,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
      * @param newWeights - final weights we want to get to. Note that the ORDER (and number) of
      *                     tokens can change if you have added or removed tokens from the pool
      *                     It ensures the counts are correct, but can't help you with the order!
-     *                     You can get the underlying BPool (it's public), and call 
+     *                     You can get the underlying BPool (it's public), and call
      *                     getCurrentTokens() to see the current ordering, if you're not sure
      * @param startBlock - when weights should start to change
      * @param endBlock - when weights will be at their final values
@@ -405,7 +407,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
         require(rights.canChangeWeights, "ERR_NOT_CONFIGURABLE_WEIGHTS");
          // Don't start this when we're in the middle of adding a new token
         require(!newToken.isCommitted, "ERR_PENDING_TOKEN_ADD");
-        
+
         // Library computes the startBlock, computes startWeights as the current
         // denormalized weights of the core pool tokens.
         SmartPoolManager.updateWeightsGradually(
@@ -523,7 +525,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
 
         // Delegate to library to save space
         SmartPoolManager.removeToken(IConfigurableRightsPool(address(this)), bPool, token);
-    } 
+    }
 
     /**
      * @notice Join a pool
@@ -783,7 +785,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
         _burnPoolShare(pAiAfterExitFee);
         _pushPoolShare(address(bFactory), exitFee);
         _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);
-        
+
         return poolAmountIn;
     }
 
@@ -1021,7 +1023,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
 
     // Wrappers around corresponding core functions
 
-    // 
+    //
     function _mint(uint amount) internal override {
         super._mint(amount);
         require(varTotalSupply <= bspCap, "ERR_CAP_LIMIT_REACHED");
diff --git a/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol b/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
index 6fe5b44..8a3fa1e 100644
--- a/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
+++ b/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
@@ -48,7 +48,7 @@ contract ESPFactory {
      */
     function newEsp(
         address factoryAddress,
-        ConfigurableRightsPool.PoolParams calldata poolParams,
+        PoolParams calldata poolParams,
         RightsManager.Rights calldata rights
     )
         external
diff --git a/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol b/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
index 9d58e72..c183f1e 100644
--- a/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
+++ b/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
@@ -88,7 +88,7 @@ contract ElasticSupplyPool is ConfigurableRightsPool {
      */
     constructor(
         address factoryAddress,
-        ConfigurableRightsPool.PoolParams memory poolParams,
+        PoolParams memory poolParams,
         RightsManager.Rights memory rightsParams
     )
         // solhint-disable-next-line visibility-modifier-order
@@ -173,7 +173,7 @@ contract ElasticSupplyPool is ConfigurableRightsPool {
        revert("ERR_UNSUPPORTED_OPERATION");
     }
 
-    /** 
+    /**
      * @notice Update the weight of a token without changing the price (or transferring tokens)
      * @param token The address of the token in the underlying BPool to be weight adjusted.
      * @dev Checks if the token's current pool balance has deviated from cached balance,
diff --git a/slither-hack.diff b/slither-hack.diff
deleted file mode 100644
index cf58954..0000000
--- a/slither-hack.diff
+++ /dev/null
@@ -1,183 +0,0 @@
-diff --git a/contracts/RedeemableERC20Pool.sol b/contracts/RedeemableERC20Pool.sol
-index e9cc272..1f79f9d 100644
---- a/contracts/RedeemableERC20Pool.sol
-+++ b/contracts/RedeemableERC20Pool.sol
-@@ -19,7 +19,7 @@ import { IBPool } from "./configurable-rights-pool/contracts/IBFactory.sol";
- import { BPool } from "./configurable-rights-pool/contracts/test/BPool.sol";
- import { RightsManager } from "./configurable-rights-pool/libraries/RightsManager.sol";
- import { BalancerConstants } from "./configurable-rights-pool/libraries/BalancerConstants.sol";
--import { ConfigurableRightsPool } from "./configurable-rights-pool/contracts/ConfigurableRightsPool.sol";
-+import { ConfigurableRightsPool, PoolParams } from "./configurable-rights-pool/contracts/ConfigurableRightsPool.sol";
- import { CRPFactory } from "./configurable-rights-pool/contracts/CRPFactory.sol";
- import { BFactory } from "./configurable-rights-pool/contracts/test/BFactory.sol";
-
-@@ -173,7 +173,7 @@ contract RedeemableERC20Pool is Ownable, Initable, BlockBlockable {
-
-         return poolConfig_.crpFactory.newCrp(
-             address(poolConfig_.balancerFactory),
--            ConfigurableRightsPool.PoolParams(
-+            PoolParams(
-                 "R20P",
-                 "RedeemableERC20Pool",
-                 poolAddresses_,
-Submodule contracts/configurable-rights-pool contains modified content
-diff --git a/contracts/configurable-rights-pool/contracts/CRPFactory.sol b/contracts/configurable-rights-pool/contracts/CRPFactory.sol
-index 52ef23b..532f5a1 100644
---- a/contracts/configurable-rights-pool/contracts/CRPFactory.sol
-+++ b/contracts/configurable-rights-pool/contracts/CRPFactory.sol
-@@ -49,7 +49,7 @@ contract CRPFactory {
-      */
-     function newCrp(
-         address factoryAddress,
--        ConfigurableRightsPool.PoolParams calldata poolParams,
-+        PoolParams calldata poolParams,
-         RightsManager.Rights calldata rights
-     )
-         external
-diff --git a/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol b/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
-index e3df626..e98f5c7 100644
---- a/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
-+++ b/contracts/configurable-rights-pool/contracts/ConfigurableRightsPool.sol
-@@ -18,6 +18,17 @@ import { RightsManager } from "../libraries/RightsManager.sol";
- import "../libraries/SmartPoolManager.sol";
- import "../libraries/SafeApprove.sol";
-
-+struct PoolParams {
-+    // Balancer Pool Token (representing shares of the pool)
-+    string poolTokenSymbol;
-+    string poolTokenName;
-+    // Tokens inside the Pool
-+    address[] constituentTokens;
-+    uint[] tokenBalances;
-+    uint[] tokenWeights;
-+    uint swapFee;
-+}
-+
- // Contracts
-
- /**
-@@ -44,16 +55,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-
-     // Type declarations
-
--    struct PoolParams {
--        // Balancer Pool Token (representing shares of the pool)
--        string poolTokenSymbol;
--        string poolTokenName;
--        // Tokens inside the Pool
--        address[] constituentTokens;
--        uint[] tokenBalances;
--        uint[] tokenWeights;
--        uint swapFee;
--    }
-+
-
-     // State variables
-
-@@ -122,7 +124,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-         uint oldCap,
-         uint newCap
-     );
--
-+
-     event NewTokenCommitted(
-         address indexed token,
-         address indexed pool,
-@@ -207,7 +209,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-         // These default block time parameters can be overridden in createPool
-         minimumWeightChangeBlockPeriod = DEFAULT_MIN_WEIGHT_CHANGE_BLOCK_PERIOD;
-         addTokenTimeLockInBlocks = DEFAULT_ADD_TOKEN_TIME_LOCK_IN_BLOCKS;
--
-+
-         gradualUpdate.startWeights = poolParams.tokenWeights;
-         // Initializing (unnecessarily) for documentation - 0 means no gradual weight change has been initiated
-         gradualUpdate.startBlock = 0;
-@@ -328,7 +330,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-     {
-         require (minimumWeightChangeBlockPeriodParam >= addTokenTimeLockInBlocksParam,
-                 "ERR_INCONSISTENT_TOKEN_TIME_LOCK");
--
-+
-         minimumWeightChangeBlockPeriod = minimumWeightChangeBlockPeriodParam;
-         addTokenTimeLockInBlocks = addTokenTimeLockInBlocksParam;
-
-@@ -385,7 +387,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-      * @param newWeights - final weights we want to get to. Note that the ORDER (and number) of
-      *                     tokens can change if you have added or removed tokens from the pool
-      *                     It ensures the counts are correct, but can't help you with the order!
--     *                     You can get the underlying BPool (it's public), and call
-+     *                     You can get the underlying BPool (it's public), and call
-      *                     getCurrentTokens() to see the current ordering, if you're not sure
-      * @param startBlock - when weights should start to change
-      * @param endBlock - when weights will be at their final values
-@@ -405,7 +407,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-         require(rights.canChangeWeights, "ERR_NOT_CONFIGURABLE_WEIGHTS");
-          // Don't start this when we're in the middle of adding a new token
-         require(!newToken.isCommitted, "ERR_PENDING_TOKEN_ADD");
--
-+
-         // Library computes the startBlock, computes startWeights as the current
-         // denormalized weights of the core pool tokens.
-         SmartPoolManager.updateWeightsGradually(
-@@ -523,7 +525,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-
-         // Delegate to library to save space
-         SmartPoolManager.removeToken(IConfigurableRightsPool(address(this)), bPool, token);
--    }
-+    }
-
-     /**
-      * @notice Join a pool
-@@ -783,7 +785,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-         _burnPoolShare(pAiAfterExitFee);
-         _pushPoolShare(address(bFactory), exitFee);
-         _pushUnderlying(tokenOut, msg.sender, tokenAmountOut);
--
-+
-         return poolAmountIn;
-     }
-
-@@ -1021,7 +1023,7 @@ contract ConfigurableRightsPool is PCToken, BalancerOwnable, BalancerReentrancyG
-
-     // Wrappers around corresponding core functions
-
--    //
-+    //
-     function _mint(uint amount) internal override {
-         super._mint(amount);
-         require(varTotalSupply <= bspCap, "ERR_CAP_LIMIT_REACHED");
-diff --git a/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol b/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
-index 6fe5b44..8a3fa1e 100644
---- a/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
-+++ b/contracts/configurable-rights-pool/contracts/templates/ESPFactory.sol
-@@ -48,7 +48,7 @@ contract ESPFactory {
-      */
-     function newEsp(
-         address factoryAddress,
--        ConfigurableRightsPool.PoolParams calldata poolParams,
-+        PoolParams calldata poolParams,
-         RightsManager.Rights calldata rights
-     )
-         external
-diff --git a/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol b/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
-index 9d58e72..c183f1e 100644
---- a/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
-+++ b/contracts/configurable-rights-pool/contracts/templates/ElasticSupplyPool.sol
-@@ -88,7 +88,7 @@ contract ElasticSupplyPool is ConfigurableRightsPool {
-      */
-     constructor(
-         address factoryAddress,
--        ConfigurableRightsPool.PoolParams memory poolParams,
-+        PoolParams memory poolParams,
-         RightsManager.Rights memory rightsParams
-     )
-         // solhint-disable-next-line visibility-modifier-order
-@@ -173,7 +173,7 @@ contract ElasticSupplyPool is ConfigurableRightsPool {
-        revert("ERR_UNSUPPORTED_OPERATION");
-     }
-
--    /**
-+    /**
-      * @notice Update the weight of a token without changing the price (or transferring tokens)
-      * @param token The address of the token in the underlying BPool to be weight adjusted.
-      * @dev Checks if the token's current pool balance has deviated from cached balance,
